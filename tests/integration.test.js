/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã AI API
 * –¢—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏ BASE_URL
 */

import { describe, it, expect, beforeAll } from 'vitest';
import dotenv from 'dotenv';
import { handler } from '../src/index.js';

dotenv.config();

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º AI API', () => {
  beforeAll(() => {
    if (!process.env.AI_API_TOKEN || !process.env.AI_API_URL) {
      console.log('‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AI_API_TOKEN –∏ AI_API_URL –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏:');
      console.log('   AI_API_TOKEN=your_api_token_here');
      console.log('   AI_API_URL=https://api.deepseek.com/chat/completions');
      throw new Error('–¢—Ä–µ–±—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AI_API_TOKEN –∏ AI_API_URL –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
    }
    console.log('üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º AI API');
  });

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ Ant Design', async () => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify({
        platform: 'antd',
        request: '–ø–æ–∏—Å–∫',
        qtty: 3
      })
    };
    const context = { awsRequestId: 'test-search' };

    const result = await handler(event, context);

    expect(result.statusCode).toBe(200);
    
    const body = JSON.parse(result.body);
    expect(body.success).toBe(true);
    expect(body.data.icon_names).toHaveLength(3);
    expect(body.meta.platform).toBe('antd');
    expect(body.meta.quantity).toBe(3);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∫–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∏—Å–∫–∞
    const iconNames = body.data.icon_names.map(icon => icon.toLowerCase());
    expect(iconNames.some(icon => icon.includes('search'))).toBe(true);
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏:', body.data.icon_names);
  });

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ Unicode –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–µ—Ä–¥—Ü–∞', async () => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify({
        platform: 'unicode',
        request: '—Å–µ—Ä–¥—Ü–µ',
        qtty: 3
      })
    };
    const context = { awsRequestId: 'test-heart' };

    const result = await handler(event, context);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    expect(result.statusCode).toBe(200);
    
    const body = JSON.parse(result.body);
    expect(body.success).toBe(true);
    expect(body.data.icon_names.length).toBeGreaterThan(0);
    expect(body.meta.platform).toBe('unicode');

    const iconNames = body.data.icon_names;
    expect(iconNames.some(icon => 
      icon.includes('U+2764') || icon.includes('U+1F496') || icon.includes('U+2665') || 
      icon.includes('U+1F495') || icon.includes('U+1F497') || icon.includes('U+1F498')
    )).toBe(true);
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ Unicode –∏–∫–æ–Ω–∫–∏:', body.data.icon_names);
  });

  it('–¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ Material UI', async () => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify({
        platform: 'mui',
        request: '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        qtty: 1
      })
    };
    const context = { awsRequestId: 'test-settings' };

    const result = await handler(event, context);

    expect(result.statusCode).toBe(200);
    
    const body = JSON.parse(result.body);
    expect(body.success).toBe(true);
    expect(body.data.icon_names.length).toBeGreaterThan(0);
    expect(body.meta.platform).toBe('mui');

    const iconNames = body.data.icon_names.map(icon => icon.toLowerCase());
    expect(iconNames.some(icon => 
      icon.includes('settings') || icon.includes('gear') || icon.includes('config')
    )).toBe(true);
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∫–æ–Ω–∫–∏:', body.data.icon_names);
  });
});
